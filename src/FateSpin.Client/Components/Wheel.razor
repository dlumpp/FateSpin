<div class="wheel-container">
    <div class="wheel-wrapper">
        <div class="wheel-svg-container" style="transform: rotate(@(currentRotation)deg); @(isSpinning ? "transition: transform 3s cubic-bezier(0.23, 1, 0.32, 1);" : "")">
            <svg class="wheel-svg" viewBox="0 0 200 200">
                @for (int i = 0; i < wheelItems.Count; i++)
                {
                    <Wedge Text="@wheelItems[i]" 
                           Color="@wedgeColors[i % wedgeColors.Length]"
                           StartAngle="@(i * degreesPerWedge)"
                           WedgeAngle="@degreesPerWedge"
                           Index="@i"
                           TotalWedges="@wheelItems.Count" />
                }
            </svg>
        </div>
        <div class="pointer"></div>
        <button class="spin-button" @onclick="SpinWheel" disabled="@isSpinning">
            @(isSpinning ? luckyClover : "Spin!")
        </button>
    </div>
    
    <div class="input-section">
        <h3>Customize Your Wheel</h3>
        <textarea @bind="userInput" @oninput="OnInputChanged" 
                  placeholder="Enter one item per line&#10;Eat&#10;Sleep&#10;Code" 
                  class="wheel-input"></textarea>
    </div>
</div>

@code {
    // Default wheel items
    private List<string> wheelItems = new List<string> { "Eat", "Sleep", "Code" };
    private string userInput = "Eat\nSleep\nCode";
    private double degreesPerWedge => wheelItems.Count > 0 ? 360.0 / wheelItems.Count : 360.0;
    
    // Theme-appropriate colors that complement the dark background
    private string[] wedgeColors = {
        "#dc3545", // Original red
        "#fd7e14", // Orange  
        "#ffc107", // Yellow
        "#198754", // Green
        "#0dcaf0", // Cyan
        "#6f42c1"  // Purple
    };

    private bool isSpinning = false;
    private double currentRotation = 0;
    private Random random = new Random();

    private void OnInputChanged(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            userInput = e.Value.ToString()!;
            UpdateWheelItems();
        }
    }

    private void UpdateWheelItems()
    {
        var items = userInput.Split('\n', StringSplitOptions.RemoveEmptyEntries)
                            .Select(item => item.Trim())
                            .Where(item => !string.IsNullOrEmpty(item))
                            .ToList();
        
        if (items.Count > 0)
        {
            wheelItems = items;
        }
        else
        {
            wheelItems = new List<string> { "Empty" };
        }
        StateHasChanged();
    }

    private string luckyClover = "\U0001F340";

    private async Task SpinWheel()
    {
        if (isSpinning) return;
        
        isSpinning = true;
        
        // Generate random spin amount (multiple full rotations + random final position)
        int fullRotations = random.Next(3, 6); // 3-5 full rotations
        double finalPosition = random.NextDouble() * 360; // Random final position
        double totalRotation = (fullRotations * 360) + finalPosition;
        
        // Calculate target rotation
        double targetRotation = currentRotation + totalRotation;
        
        StateHasChanged();
        
        // Small delay to ensure the transition CSS is applied
        await Task.Delay(50);
        
        // Set the new rotation which will trigger the CSS transition
        currentRotation = targetRotation;
        StateHasChanged();
        
        // Wait for animation to complete (3 seconds)
        await Task.Delay(3000);
        
        // Normalize rotation to keep it within 0-360 range for future spins
        currentRotation = currentRotation % 360;
        isSpinning = false;
        StateHasChanged();
    }
}