<g class="wedge">
    <!-- Wedge path -->
    <path d="@GetWedgePath()" fill="@Color" class="wedge-slice" />
    
    <!-- Text -->
    <text x="@TextX" y="@TextY" 
          text-anchor="middle" 
          dominant-baseline="middle"
          transform="rotate(@TextRotation @TextX @TextY)"
          class="wedge-text"
          style="font-size: @(FontSize)px;">
        @Text
    </text>
</g>

@code {
    [Parameter] public string Text { get; set; } = "";
    [Parameter] public string Color { get; set; } = "#dc3545";
    [Parameter] public double StartAngle { get; set; } = 0;
    [Parameter] public double WedgeAngle { get; set; } = 90;
    [Parameter] public int Index { get; set; } = 0;
    [Parameter] public int TotalWedges { get; set; } = 1;

    private double CenterX = 100;
    private double CenterY = 100;
    private double Radius = 90;
    private double TextRadius = 60;

    private double EndAngle => StartAngle + WedgeAngle;
    private double CenterAngle => StartAngle + (WedgeAngle / 2);
    
    // Text positioning
    private double TextX => CenterX + TextRadius * Math.Cos(CenterAngle * Math.PI / 180);
    private double TextY => CenterY + TextRadius * Math.Sin(CenterAngle * Math.PI / 180);
    private double TextRotation => CenterAngle;
    
    // Dynamic font sizing
    private double FontSize
    {
        get
        {
            var baseFontSize = 14.0;
            var wedgeWidth = WedgeAngle * Math.PI / 180 * TextRadius; // Arc length at text radius
            var textLength = Text.Length;
            
            // Scale based on text length and available space
            var fontSize = Math.Max(baseFontSize - Math.Max(0, textLength - 6), 8.0);
            fontSize = Math.Min(fontSize, wedgeWidth / textLength * 1.5);
            
            return Math.Max(fontSize, 8.0); // Minimum 8px
        }
    }

    private string GetWedgePath()
    {
        // Convert angles to radians
        var startRad = StartAngle * Math.PI / 180;
        var endRad = EndAngle * Math.PI / 180;
        
        // Calculate start and end points on the circle
        var startX = CenterX + Radius * Math.Cos(startRad);
        var startY = CenterY + Radius * Math.Sin(startRad);
        var endX = CenterX + Radius * Math.Cos(endRad);
        var endY = CenterY + Radius * Math.Sin(endRad);
        
        // Determine if we need the large arc flag (for arcs > 180Â°)
        var largeArcFlag = WedgeAngle > 180 ? 1 : 0;
        
        // Create SVG path: Move to center, Line to start, Arc to end, Line back to center
        return $"M {CenterX} {CenterY} L {startX:F2} {startY:F2} A {Radius} {Radius} 0 {largeArcFlag} 1 {endX:F2} {endY:F2} Z";
    }
}